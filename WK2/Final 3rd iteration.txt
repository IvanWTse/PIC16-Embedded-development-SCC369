
;=============================================================================;
;   PROGRAM	SCC369 ASSESSMENT 1 LIGHTS AND SWITCHES
;   
;   DESCR	TOTAL FIVE TASKS ARE IMPLEMENTED AND LINKED TOGETHER
;
;   AUTHOR	HOI KING IVAN XIE, 37845039
;    
;   VERSION	3.0	22/10/2021
;
;=============================================================================;
;    
TITLE	    "Lights and switches"
SUBTITLE    "SCC369 Assessment 1 WK1-2"
    
PROCESSOR   16LF1507
    
; PIC16F1507 Configuration Bit Settings

; Assembly source line config statements

#include <xc.inc>

; CONFIG1
  CONFIG  FOSC = INTOSC         ; Oscillator Selection bits (Internal Oscillator, I/O Function on OSC1)
  CONFIG  WDTE = OFF            ; Watchdog Timer Enable (WDT disabled)
  CONFIG  PWRTE = OFF           ; Power-up Timer Enable (PWRT disabled)
  CONFIG  MCLRE = ON            ; MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
  CONFIG  CP = OFF              ; Flash Program Memory Code Protection (Program memory code protection is disabled)
  CONFIG  BOREN = OFF           ; Brown-out Reset Enable (Brown-out Reset disabled)
  CONFIG  CLKOUTEN = OFF        ; Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)

; CONFIG2
  CONFIG  WRT = OFF             ; Flash Memory Self-Write Protection (Write protection off)
  CONFIG  STVREN = ON           ; Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
  CONFIG  BORV = LO             ; Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
  CONFIG  LPBOR = OFF           ; Low-Power Brown Out Reset (Low-Power BOR is disabled)
  CONFIG  LVP = ON              ; Low-Voltage Programming Enable (Low-voltage programming enabled)

  
MOVLF MACRO literal, reg
 MOVLW literal
 MOVWF reg mod 0x80
 ENDM

bDlyLpCount EQU 0X14
  
PSECT udata_bank0
GLOBAL	COUNTER
GLOBAL	COUNTER2
GLOBAL	STU_ID
GLOBAL	TEMP1
GLOBAL	TEMP2
COUNTER:	DS  1
COUNTER2:	DS  1
STU_ID:		DS  8
TEMP1:		DS  1
TEMP2:		DS  1
  
;Instruction opcodes are 14 bits wide on this midline device (PIC16F1507).
  
;delta=2 flag indicates that 2 bytes reside at each address in memory space.

;Specify psect position for linker: 
  ; 1. Go to File>Project Properties> pic-as Global options> pic-as Linker in the IDE
  ; 2. Click on 'Custom Linker Options' > '...' and add the line below (excluding the ';')
;    -Pres_vect=0h     
  
PSECT res_vect, class=CODE, delta=2
res_vect:
    goto main
;===================;    
    
;Specify psect position for linker: 
;    -Pint_vect=4h 
PSECT int_vect, class=CODE, delta=2 
int_vect:
    goto isr
;===================;    
    
;the program psect is positioned automatically and so no corresponding linker entry is needed 
PSECT program, class=CODE, delta=2
;main program here
main:
    BANKSEL ANSELC	;   Could use MOVLB 3 to move to Bank 3
    CLRF    ANSELC	;   Ensure configured for digital I/O (disable ADC)
    CLRF    ANSELB	;   Ensure configured for digital I/O (disable ADC)
    BANKSEL TRISC	;   Could use MOVLB 1 to move to Bank 1
    CLRF    TRISC	;   PORTC all outputs
    MOVLF   0XFF, TRISB	;   PORTB all inputs
    BANKSEL PORTC	;   Could use MOVLB 0 to move to Bank 0
    CLRF    PORTC	;   Clear PORTC
    CLRF    FSR0H
    GOTO    TASK1
    
 ;=========================================;
 ;  Test subroutine for debuging, useless
 ;=========================================;
TEST:
    MOVF    PORTB, 0
    MOVWF   PORTC
    GOTO    TEST
    
;=============================================================================;
;  Blocking subroutine to pause the program until PORTB.4 button is pressed
;=============================================================================;
WAIT_PB4_PRESS:
    BTFSS   PORTB, 4		; Check if PORTB.4 is been pressing
    RETURN			; True then return
    GOTO    WAIT_PB4_PRESS	; False then loop back to this subroutine
    
;=============================================================================;
;  Blocking subroutine to pause the program until PORTB.4 button is no longer 
;  been pressing
;=============================================================================;
WAIT_PB4_RELEASE:		
    BTFSC   PORTB, 4		; Check if PORTB.4 is no longer been pressing
    RETURN			; True then return
    GOTO    WAIT_PB4_RELEASE	; False then loop back to this subroutine
   
;=============================================================================;
; Between each individual task, it should turn all lights on until PORTB.4 
; been pressed
;=============================================================================;
SWITCH_TASK:
    CALL    WAIT_PB4_RELEASE	; Wait until PB4 is not been pressing from entering this subroutine
    MOVLF   0XFF, PORTC		; Turn all LEDs on
    CALL    WAIT_PB4_PRESS	; Wait until PB4 is pressed, keeping all lights on
    CALL    WAIT_PB4_RELEASE	; Wait until PB4 is released
    RETURN
    
TASK1:
    CALL    SWITCH_TASK
    GOTO    TASK2
    
;=============================================================================;
; This task will display my Student ID digit by digit in hex. The higher bits 
; are the indexes. The lower bits are the digits. 
;
; All eight digits are put into eight consecutive global registers, and access 
; them by indirect access with FSR0 and INDF0 registers. 
;=============================================================================;
TASK2:
    MOVLF   0x03, STU_ID	; Put the first digit to variable STU_ID
    MOVLF   0X17, STU_ID+1
    MOVLF   0X28, STU_ID+2
    MOVLF   0X34, STU_ID+3
    MOVLF   0X45, STU_ID+4
    MOVLF   0X50, STU_ID+5
    MOVLF   0X63, STU_ID+6
    MOVLF   0X79, STU_ID+7
    CLRF    PORTC
    CLRW
    MOVLF   0X08, COUNTER	; Put an eight-time counter into register
    MOVLF   0X22, FSR0L		; Put the address of first digit of variable STU_ID into FSR
TASK2_LOOP:
    MOVIW   FSR0++		; Get values indirectly from address in FSR register, which is the value of STU_ID. Then increment itself
TASK2_SHOW:
    MOVWF   PORTC		; Show the value gained from STU_ID through PORTC
    BTFSC   PORTB, 5		; Listening if PORTB.5 is pressed
    GOTO    TASK2_SHOW		; If false, repeating show the value
    CALL    TASK2_PRTB5_PRESSED	; If true, waiting for releasing of PORTB.5 button
    DECFSZ  COUNTER		; Auto-decrement on the eight-time counter, then check if it is zero
    GOTO    TASK2_LOOP		; If false, loop and show the next digit
    CALL    SWITCH_TASK		; If true, switch to the next task
    GOTO    TASK3		; Take the program to task3
TASK2_PRTB5_PRESSED:
    BTFSS   PORTB, 5
    GOTO    TASK2_PRTB5_PRESSED
    RETURN
    
;=============================================================================;
; This task will show some bit-wise logic according to different combination 
; of pressed buttons at real time. Two buttons at bit 4 and 5 of PORTB will 
; be read as input. The output will be on PORTC. The PORTC reflect rules are:
;   (Copied from task description)
;   PC0 is ON when PB5 pushbutton is pressed else off
;   PC1 is ON when PB6 pushbutton is pressed else off
;   PC2 is ON when either PB5 or PB6 is pressed else off
;   PC3 is ON when both PB5 and PB6 are pressed else off
;   PC4 is ON when either PB5 or PB6 is pressed but not when both are pressed/released
;   PC5 is ON when PB5 is NOT pressed else off
;   PC6 is ON when PB6 is NOT pressed else off
;   PC7 is ON when neither PB5 nor PB6 are pressed, else off
;   
; Firstly, I translate the rules into logic syntax, which will be like:
;   PC0 = PB5
;   PC1 = PB6
;   PC2 = PB5 + PB6
;   PC3 = PB5 . PB6
;   PC4 = PB5 XOR PB6
;   PC5 = NOT PB5
;   PC6 = NOT PB6
;   PC7 = NOT (PB5 . PB6)
;
; Secondly, I simplified the rules based on different combination of PB input:
;   NOT PB5, NOT PB6 = PC7, PC6, PC5, rests are off
;   PB5, NOT PB6     = PC6, PC4, PC2, PC0, rests are off
;   NOT PB5, PB6     = PC5, PC4, PC2, PC1, rests are off
;   PB5, PB6	     = PC3, PC2, PC1, PC0, rests are off
;
;=============================================================================;
TASK3:
    BTFSC   PORTB, 4
    GOTO    TASK3_BODY
    CALL    SWITCH_TASK
    GOTO    TASK4
TASK3_BODY:
TEST_NB5NB6:
    BTFSS   PORTB, 5	    ; Check if PB5 is pressed
    GOTO    TEST_B5NB6	    ; If true, goto subroutine TEST_B5NB6 to test NB6
    BTFSS   PORTB, 6	    ; Otherwise, check if PB6 is pressed
    GOTO    NB5B6	    ; If program goes here and true, B5 is not pressed and B6 is pressed. So goes to NB5B6 to show results
    GOTO    NB5NB6	    ; Goto NB5NB6 to show results
    
TEST_NB5B6:
    BTFSS   PORTB, 5	    ; Check if PB5 is pressed
    GOTO    TEST_B5NB6	    ; If true, goto subroutine TEST_B5NB6
    BTFSS   PORTB, 6	    ; Check if PB6 is pressed
    GOTO    NB5B6	    ; If true, goto NB5B6 to show results of NB5B6
    GOTO    NB5NB6	    ; Otherwise, goto NB5NB6 because both buttons are not pressed
    
;==============================================================================
; If the program goes here, means at least button B5 is pressed. Therefore we
; just need to check if button B6 is pressed. If false, show result of B5NB6. 
; If true, show result of B5B6
;==============================================================================
TEST_B5NB6:
    BTFSC   PORTB, 5
    GOTO    NB5NB6
    BTFSC   PORTB, 6
    GOTO    B5NB6
    GOTO    B5B6

NB5NB6:
    MOVLW   11100000B
    MOVWF   PORTC
    GOTO    TASK3
B5NB6:
    MOVLW   01010101B
    MOVWF   PORTC
    GOTO    TASK3
NB5B6:
    MOVLW   00110110B
    MOVWF   PORTC
    GOTO    TASK3
B5B6:
    MOVLW   00001111B
    MOVWF   PORTC
    GOTO    TASK3
    
;=============================================================================;
; In this task, all LEDs count from 0 to 255 in binary number. The code is 
; copied from the sample code in week 1. In addition, I put some PB4 button
; detection codes to progress to next task. 
;=============================================================================;
TASK4:
    CLRF    COUNTER
    CLRF    COUNTER2
    CLRF    PORTC
TASK4_COUNT:
    CALL    DELAY
    INCF    PORTC, F
    BTFSC   PORTB, 4
    GOTO    TASK4_COUNT
    CALL    SWITCH_TASK
    GOTO    TASK5
        
DELAY:
    MOVLW   bDlyLpCount		;   Reset outer loop count
    MOVWF   COUNTER2

DL_OUTER:
    MOVLW   0xFF		;   Reset inner loop count
    MOVWF   COUNTER

DL_INNER:
    DECFSZ  COUNTER, F	;   Break inner loop if zero
    GOTO    DL_INNER

    DECFSZ  COUNTER2, F	;   Break outer loop if zero
    GOTO    DL_OUTER

    RETURN
    
;=============================================================================;
; In this task, First of all, I put a 0x01 into PORTC because only one LED
; needs to be set. Then do the left shift operation to move the set light move
; left and loop this opertion. Before each left shift operation, check if the 
; leftmost bit is set. If it is set, change the operation to right shift. The 
; same, before doing the right shift operation, check if the rightmost bit is
; set. Loop the whole task until a B4 button is pressed to switch to another 
; task. In this task, the subroutine DELAY will be called to make a small delay
; between each LED moving operation. 
;=============================================================================;
TASK5:
    MOVLF   0X01, PORTC	    ; Put one set bit into PORTC because only one LED needs to be set
    CLRF    COUNTER	    ; Empty two counter register for subroutine DELAY
    CLRF    COUNTER2
TASK5_LLOOP:
    LSLF    PORTC, 1	    ; Move the bit left 
    CALL    DELAY	    ; Wait for a short while
    BTFSC   PORTC, 7	    ; Detect if the leftmost bit is set
    GOTO    TASK5_RLOOP	    ; If true, go and loop the right shift loops
    BTFSC   PORTB, 4	    ; Task switching detecting for detacting B4 pressed
    GOTO    TASK5_LLOOP
    CALL    SWITCH_TASK
    GOTO    TASK2
;=============================================================================;
; Similar subroutine to test if the rightmost bit is set. If true, goes and loop 
; the left shift subroutine until the leftmost bit is set. If B4 is pressed,
; switch to another task. 
;=============================================================================;
TASK5_RLOOP:
    LSRF    PORTC, 1
    CALL    DELAY
    BTFSC   PORTC, 0
    GOTO    TASK5_LLOOP
    BTFSC   PORTB, 4
    GOTO    TASK5_RLOOP
    CALL    SWITCH_TASK
    GOTO    TASK2
    
;isr routine here    
isr:
    movlw 0xfe
    goto isr
    
